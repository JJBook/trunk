#ifndef _TINY4412_CPU_H
#define _TINY4412_CPU_H

#define TINY4412_PRO_ID		0x10000000
#define TINY4412_SYSREG_BASE	0x10010000
#define TINY4412_POWER_BASE	0x10020000
#define TINY4412_CLOCK_BASE	0x10030000
//#define TINY4412_GPIO_BASE	0xE0300000
//#define TINY4412_VIC0_BASE	0xE4000000
//#define TINY4412_VIC1_BASE	0xE4100000
//#define TINY4412_VIC2_BASE	0xE4200000
//#define TINY4412_DMC_BASE	0xE6000000
//#define TINY4412_SROMC_BASE	0xE7000000
//#define TINY4412_ONENAND_BASE	0xE7100000
#define TINY4412_HSMMC_BASE	0x12510000
#define TINY4412_PWMTIMER_BASE	0x139D0000
//#define TINY4412_WATCHDOG_BASE	0xEA200000
#define TINY4412_UART_BASE	0x13800000
//#define TINY4412_MMC_BASE	0xED800000


#define BIT0 				0x00000001
#define BIT1 				0x00000002
#define BIT2 				0x00000004
#define BIT3 				0x00000008
#define BIT4 				0x00000010
#define BIT5 				0x00000020
#define BIT6				0x00000040
#define BIT7				0x00000080
#define BIT8				0x00000100
#define BIT9				0x00000200
#define BIT10				0x00000400
#define BIT11				0x00000800
#define BIT12				0x00001000
#define BIT13				0x00002000
#define BIT14				0x00004000
#define BIT15				0x00008000
#define BIT16				0x00010000
#define BIT17				0x00020000
#define BIT18				0x00040000
#define BIT19				0x00080000
#define BIT20				0x00100000
#define BIT21				0x00200000
#define BIT22				0x00400000
#define BIT23				0x00800000
#define BIT24				0x01000000
#define BIT25				0x02000000
#define BIT26				0x04000000
#define BIT27				0x08000000
#define BIT28				0x10000000
#define BIT29				0x20000000
#define BIT30				0x40000000
#define BIT31				0x80000000

#define __REG(x)	(*(volatile unsigned int *)(x))

/*
 * CHIP ID
 */
#define CHIP_ID_BASE		        0x10000000

#define PRO_ID_OFFSET	0x0
#define PRO_ID		__REG(CHIP_ID_BASE+PRO_ID_OFFSET)
#define PACKAGE_ID_OFFSET	0x4
#define PACKAGE_ID      __REG(CHIP_ID_BASE+PACKAGE_ID_OFFSET)


/*
 * UART
 */

#define TINY4412_UART0_OFFSET		0x00000
#define TINY4412_UART1_OFFSET		0x10000
#define TINY4412_UART2_OFFSET		0x20000
#define TINY4412_UART3_OFFSET		0x30000

#if defined(CONFIG_SERIAL0)
#define TINY4412_UART_CONSOLE_BASE (TINY4412_UART_BASE + TINY4412_UART0_OFFSET)
#elif defined(CONFIG_SERIAL1)
#define TINY4412_UART_CONSOLE_BASE (TINY4412_UART_BASE + TINY4412_UART1_OFFSET)
#elif defined(CONFIG_SERIAL2)
#define TINY4412_UART_CONSOLE_BASE (TINY4412_UART_BASE + TINY4412_UART2_OFFSET)
#elif defined(CONFIG_SERIAL3)
#define TINY4412_UART_CONSOLE_BASE (TINY4412_UART_BASE + TINY4412_UART3_OFFSET)
#else
#define TINY4412_UART_CONSOLE_BASE (TINY4412_UART_BASE + TINY4412_UART0_OFFSET)
#endif

#define ULCON_OFFSET			0x00
#define UCON_OFFSET			    0x04
#define UFCON_OFFSET			0x08
#define UMCON_OFFSET			0x0C
#define UTRSTAT_OFFSET			0x10
#define UERSTAT_OFFSET			0x14
#define UFSTAT_OFFSET			0x18
#define UMSTAT_OFFSET			0x1C
#define UTXH_OFFSET			    0x20
#define URXH_OFFSET			    0x24
#define UBRDIV_OFFSET			0x28
#define UDIVSLOT_OFFSET			0x2C
#define UINTP_OFFSET			0x30
#define UINTSP_OFFSET			0x34
#define UINTM_OFFSET			0x38
//#define UTRSTAT_TX_EMPTY		BIT2
//#define UTRSTAT_RX_READY		BIT0
#define UART_ERR_MASK			0xF

#define SAMSUNG_BASE(device, base)				\
static inline unsigned int samsung_get_base_ ##device(void)	\
{								\
	return TINY4412_##base;				\
}

//SAMSUNG_BASE(clock, CLOCK_BASE)
//SAMSUNG_BASE(gpio, GPIO_BASE)
//SAMSUNG_BASE(pro_id, PRO_ID)
//SAMSUNG_BASE(mmc, MMC_BASE)
//SAMSUNG_BASE(sromc, SROMC_BASE)
//SAMSUNG_BASE(timer, PWMTIMER_BASE)
SAMSUNG_BASE(uart, UART_CONSOLE_BASE)

#endif	/*_TINY4412_CPU_H*/